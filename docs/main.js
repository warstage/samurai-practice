!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=31)}([function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||r(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),e.Vector=void 0,i(n(16),e),i(n(17),e),i(n(4),e),i(n(21),e),i(n(5),e),i(n(8),e),i(n(9),e),i(n(11),e),i(n(23),e),i(n(3),e),i(n(24),e),i(n(10),e),i(n(6),e),i(n(25),e),i(n(27),e),i(n(28),e),i(n(14),e),i(n(29),e),e.Vector=n(30),i(n(15),e)},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(18),i=n(19),o=n(20);function s(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,n){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!a.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=u(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(a.isBuffer(e)){var n=0|d(e.length);return 0===(t=u(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?u(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=u(t,e<0?0:0|d(e)),!a.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|d(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(t).length;default:if(r)return D(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return k(this,e,n);case"utf8":case"utf-8":return P(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return j(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function b(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=a.from(e,r)),a.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,u=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,u/=2,a/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<u;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===a)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+a>u&&(n=u-a),o=n;o>=0;o--){for(var f=!0,l=0;l<a;l++)if(c(t,o+l)!==c(e,l)){f=!1;break}if(f)return o}return-1}function g(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var u=parseInt(e.substr(2*s,2),16);if(isNaN(u))return s;t[n+s]=u}return s}function w(t,e,n,r){return q(D(e,t.length-n),t,n,r)}function _(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function E(t,e,n,r){return _(t,e,n,r)}function S(t,e,n,r){return q(F(e),t,n,r)}function x(t,e,n,r){return q(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function P(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,u,a,c=t[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(a=(31&c)<<6|63&o)>127&&(h=a);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(a=(15&c)<<12|(63&o)<<6|63&s)>2047&&(a<55296||a>57343)&&(h=a);break;case 4:o=t[i+1],s=t[i+2],u=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&u)&&(a=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&u)>65535&&a<1114112&&(h=a)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,n){return c(null,t,e,n)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},a.allocUnsafe=function(t){return f(null,t)},a.allocUnsafeSlow=function(t){return f(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=a.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!a.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},a.byteLength=p,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)b(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)b(this,e,e+3),b(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)b(this,e,e+7),b(this,e+1,e+6),b(this,e+2,e+5),b(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?P(this,0,t):y.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,n,r,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),u=Math.min(o,s),c=this.slice(r,i),h=t.slice(e,n),f=0;f<u;++f)if(c[f]!==h[f]){o=c[f],s=h[f];break}return o<s?-1:s<o?1:0},a.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},a.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},a.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},a.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return g(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return E(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function k(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=V(t[o]);return i}function j(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function C(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function A(t,e,n,r,i,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function R(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function U(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(t,e,n,r,o){return o||U(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,o){return o||U(t,0,n,8),i.write(t,e,n,r,52,8),n+8}a.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;n=new a(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},a.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||C(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},a.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||C(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},a.prototype.readUInt8=function(t,e){return e||C(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||C(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||C(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||C(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},a.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||C(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||C(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||C(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(t,e){e||C(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(t,e){return e||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||C(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||C(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||C(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||C(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||A(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},a.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||A(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},a.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):R(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);A(this,t,e,n,i-1,-i)}var o=0,s=1,u=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},a.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);A(this,t,e,n,i-1,-i)}var o=n-1,s=1,u=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},a.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):R(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,n){return B(this,t,e,!0,n)},a.prototype.writeFloatBE=function(t,e,n){return B(this,t,e,!1,n)},a.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},a.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},a.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},a.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=a.isBuffer(t)?t:D(new a(t,r).toString()),u=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%u]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function V(t){return t<16?"0"+t.toString(16):t.toString(16)}function D(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function F(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(2))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ObjectChange=e.MessageType=e.PacketType=e.ProcessType=void 0,function(t){t[t.Agent=1]="Agent",t[t.Headup=2]="Headup",t[t.Player=3]="Player",t[t.Server=4]="Server",t[t.Master=5]="Master",t[t.Module=6]="Module"}(e.ProcessType||(e.ProcessType={})),function(t){t[t.Heartbeat=0]="Heartbeat",t[t.Handshake=1]="Handshake",t[t.Authenticate=2]="Authenticate",t[t.Messages=3]="Messages",t[t.FederationAdded=4]="FederationAdded",t[t.FederationRemoved=5]="FederationRemoved"}(e.PacketType||(e.PacketType={})),function(t){t[t.Null=0]="Null",t[t.ObjectChanges=1]="ObjectChanges",t[t.EventDispatch=2]="EventDispatch",t[t.ServiceRequest=3]="ServiceRequest",t[t.ServiceFulfill=4]="ServiceFulfill",t[t.ServiceReject=5]="ServiceReject"}(e.MessageType||(e.MessageType={})),function(t){t[t.CREATE=1]="CREATE",t[t.UPDATE=2]="UPDATE",t[t.DELETE=3]="DELETE"}(e.ObjectChange||(e.ObjectChange={}))},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Compressor=void 0;var i=n(1),o=function(){function t(){this.properties={},this.objects={},this.lastPropertyId=0,this.lastObjectId=0,this.buffer=null,this.index=0}return t.prototype.encode=function(t){for(var e in this.buffer=i.Buffer.allocUnsafe(8),this.index=0,t)t.hasOwnProperty(e)&&this.write(t[e],e);return this.addByte(0),i.Buffer.from(this.buffer.subarray(0,this.index))},t.prototype.write=function(t,e){var n,i,o=e?this.getOrAddProperty(e):32768,s=256&o?128:0;if(null==t)return s|=1,this.addByte(s),void this.addProperty(o,e);var u=typeof t;if("boolean"===u)return s|=t?3:2,this.addByte(s),void this.addProperty(o,e);if("number"!==u&&"bigint"!==u){if(null==t.$id)if(t instanceof Uint8Array){var a=t.byteLength;0!==a&&a<31?(s|=64,s|=a,this.addByte(s),this.addProperty(o,e),this.addBinary(t)):a<65536?(s|=64,this.addByte(s),this.addProperty(o,e),this.addUInt16(a),this.addBinary(t)):a<4294967296&&(s|=95,this.addByte(s),this.addProperty(o,e),this.addUInt32(a),this.addBinary(t))}else{if("string"==typeof t||t instanceof String){var c=this.index;this.addByte(0),this.addProperty(o,e);var h=this.addString(t.toString());return 0!==h&&h<32?(s|=96,s|=h):(s|=96,this.addByte(0)),void(this.buffer[c]=s)}if(t instanceof Array){s|=5,this.addByte(s),this.addProperty(o,e);try{for(var f=r(t),l=f.next();!l.done;l=f.next()){var d=l.value;this.write(d,null)}}catch(t){n={error:t}}finally{try{l&&!l.done&&(i=f.return)&&i.call(f)}finally{if(n)throw n.error}}this.addByte(0)}else if("object"!==u);else{for(var p in s|=4,this.addByte(s),this.addProperty(o,e),t)t.hasOwnProperty(p)&&this.write(t[p],p);this.addByte(0)}}else if(s|=8,s|=(d=this.getOrAddObjectId(t.$id))>>8&7,this.addByte(s),this.addProperty(o,e),this.addByte(255&d),0===d||2047===d)for(var y=0;y<t.$id.length;y+=2)this.addByte(parseInt(t.$id.substr(y,2),16))}else Number.isInteger(t)?t>=0&&t<24?(s|=32,s|=t,this.addByte(s),this.addProperty(o,e)):(s|=56,t<0&&(s|=4,t+=4294967296,t^=4294967295),t<256?(this.addByte(s),this.addProperty(o,e),this.addByte(t)):t<65536?(s|=1,this.addByte(s),this.addProperty(o,e),this.addUInt16(t)):(s|=2,this.addByte(s),this.addProperty(o,e),this.addUInt32(t))):(s|=6,this.addByte(s),this.addProperty(o,e),this.addFloat(t))},t.prototype.ensureBufferSize=function(t){if(t>this.buffer.length){var e=i.Buffer.allocUnsafe(1.5*t|0);this.buffer.copy(e,0,0,this.index),this.buffer=e}},t.prototype.addByte=function(t){this.ensureBufferSize(this.index+1),this.buffer.writeUInt8(t,this.index++)},t.prototype.addUInt16=function(t){this.ensureBufferSize(this.index+2),this.buffer.writeUInt16BE(t,this.index),this.index+=2},t.prototype.addUInt32=function(t){this.ensureBufferSize(this.index+4),this.buffer.writeUInt32BE(t,this.index),this.index+=4},t.prototype.addFloat=function(t){this.ensureBufferSize(this.index+4),this.buffer.writeFloatLE(t,this.index),this.index+=4},t.prototype.addProperty=function(t,e){e&&(this.addByte(255&t),0!==t&&511!==t||(this.addString(e),this.addByte(0)))},t.prototype.addString=function(t){this.ensureBufferSize(this.index+t.length);var e=this.buffer.write(t,this.index,t.length,"utf-8");return this.index+=e,e},t.prototype.addBinary=function(t){this.ensureBufferSize(this.index+t.length);var e=i.Buffer.from(t).copy(this.buffer,this.index);this.index+=e},t.prototype.getOrAddProperty=function(t){var e=this.properties[t];if(null!=e)return e;var n=0;return 511==++this.lastPropertyId&&(this.properties={},this.lastPropertyId=1,n=511),this.properties[t]=this.lastPropertyId,n},t.prototype.getOrAddObjectId=function(t){var e=this.objects[t];if(null!=e)return e;var n=0;return 2047==++this.lastObjectId&&(this.objects={},this.lastObjectId=1,n=2047),this.objects[t]=this.lastObjectId,n},t}();e.Compressor=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decompressor=void 0;var r=n(1),i=function(){function t(){this.propertyStrings=[],this.objectIds=[]}return t.prototype.decode=function(t){this.buffer=t,this.index=0;for(var e={};this.decodeElement(e,null););return e},t.prototype.decodeElement=function(t,e){var n=this.readByte();if(0===n)return!1;var i=127&n,o=t?this.readProperty(n):null;switch(i){case 1:return t?t[o]=null:e.push(null),!0;case 2:return t?t[o]=!1:e.push(!1),!0;case 3:return t?t[o]=!0:e.push(!0),!0;case 4:for(var s={};this.decodeElement(s,null););return t?t[o]=s:e.push(s),!0;case 5:for(s=[];this.decodeElement(null,s););return t?t[o]=s:e.push(s),!0;case 6:s=this.readFloat();return t?t[o]=s:e.push(s),!0}if(8==(120&i)){var u=this.readByte();2047===(u|=(7&i)<<8)&&(this.objectIds=[],u=0);s=void 0;if(0===u)s=this.readObjectId(),this.objectIds.push(s);else{if(!(u<=this.objectIds.length))throw new Error("decompressor: invalid object "+(u-1)+" (should be < "+this.objectIds.length+")");s=this.objectIds[u-1]}return t?t[o]=s:e.push(s),!0}switch(96&i){case 32:var a=31&i;if(a<24)return t?t[o]=a:e.push(a),!0;s=0;switch(3&i){case 0:s=this.readByte();break;case 1:s=this.readUInt16();break;case 2:s=this.readUInt32()}return 0!=(4&i)&&(s^=4294967295,s-=4294967296),t?t[o]=s:e.push(s),!0;case 64:0===(c=31&i)?c=this.readUInt16():31===c&&(c=this.readUInt32());s=r.Buffer.from(this.buffer.buffer,this.index,c);return this.index+=c,t?t[o]=s:e.push(s),!0;case 96:var c;s=void 0;return s=0===(c=31&i)?this.readString():this.readStringWithSize(c),t?t[o]=s:e.push(s),!0}return!1},t.prototype.readProperty=function(t){var e=this.readByte();if(0!=(128&t)&&(e|=256),511===e&&(this.propertyStrings=[],e=0),0===e){var n=this.readString();return this.propertyStrings.push(n),n}if(--e>=this.propertyStrings.length)throw new Error("decompressor: invalid property "+e+" (should be < "+this.propertyStrings.length+")");return this.propertyStrings[e]},t.prototype.readByte=function(){return this.buffer.readUInt8(this.index++)},t.prototype.readUInt16=function(){var t=this.buffer.readUInt16BE(this.index);return this.index+=2,t},t.prototype.readUInt32=function(){var t=this.buffer.readUInt32BE(this.index);return this.index+=4,t},t.prototype.readFloat=function(){var t=this.buffer.readFloatLE(this.index);return this.index+=4,t},t.prototype.readObjectId=function(){var t={$id:r.Buffer.from(this.buffer.buffer,this.index,12).toString("hex")};return this.index+=12,t},t.prototype.readString=function(){for(var t=this.index;0!==this.buffer.readUInt8(t);)++t;var e=this.buffer.subarray(this.index,t),n=new TextDecoder("utf-8").decode(e);return this.index=t+1,n},t.prototype.readStringWithSize=function(t){var e=this.buffer.subarray(this.index,this.index+t),n=new TextDecoder("utf-8").decode(e);return this.index+=t,n},t}();e.Decompressor=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateObjectId=void 0;var r=n(1),i=0;var o=function(t){for(var e=new Uint8Array(t),n=0;n<t;++n)e[n]=Math.floor(256*Math.random());return e}(5);e.generateObjectId=function(){var t=~~(Date.now()/1e3),e=i=(i+1)%16777215,n=r.Buffer.alloc(12);return n[3]=255&t,n[2]=t>>8&255,n[1]=t>>16&255,n[0]=t>>24&255,n[4]=o[0],n[5]=o[1],n[6]=o[2],n[7]=o[3],n[8]=o[4],n[11]=255&e,n[10]=e>>8&255,n[9]=e>>16&255,n.toString("hex")}},function(t,e,n){"use strict";n.r(e),n.d(e,"Observable",(function(){return S})),n.d(e,"ConnectableObservable",(function(){return A})),n.d(e,"GroupedObservable",(function(){return R})),n.d(e,"observable",(function(){return g})),n.d(e,"Subject",(function(){return T})),n.d(e,"BehaviorSubject",(function(){return B})),n.d(e,"ReplaySubject",(function(){return nt})),n.d(e,"AsyncSubject",(function(){return it})),n.d(e,"asap",(function(){return dt})),n.d(e,"asapScheduler",(function(){return lt})),n.d(e,"async",(function(){return yt})),n.d(e,"asyncScheduler",(function(){return pt})),n.d(e,"queue",(function(){return q})),n.d(e,"queueScheduler",(function(){return F})),n.d(e,"animationFrame",(function(){return mt})),n.d(e,"animationFrameScheduler",(function(){return vt})),n.d(e,"VirtualTimeScheduler",(function(){return gt})),n.d(e,"VirtualAction",(function(){return wt})),n.d(e,"Scheduler",(function(){return V})),n.d(e,"Subscription",(function(){return d})),n.d(e,"Subscriber",(function(){return b})),n.d(e,"Notification",(function(){return Z})),n.d(e,"NotificationKind",(function(){return W})),n.d(e,"pipe",(function(){return _})),n.d(e,"noop",(function(){return _t})),n.d(e,"identity",(function(){return w})),n.d(e,"isObservable",(function(){return Et})),n.d(e,"ArgumentOutOfRangeError",(function(){return St})),n.d(e,"EmptyError",(function(){return xt})),n.d(e,"ObjectUnsubscribedError",(function(){return I})),n.d(e,"UnsubscriptionError",(function(){return l})),n.d(e,"TimeoutError",(function(){return It})),n.d(e,"bindCallback",(function(){return kt})),n.d(e,"bindNodeCallback",(function(){return At})),n.d(e,"combineLatest",(function(){return Ht})),n.d(e,"concat",(function(){return ie})),n.d(e,"defer",(function(){return oe})),n.d(e,"empty",(function(){return $})),n.d(e,"forkJoin",(function(){return se})),n.d(e,"from",(function(){return Gt})),n.d(e,"fromEvent",(function(){return ae})),n.d(e,"fromEventPattern",(function(){return ce})),n.d(e,"generate",(function(){return he})),n.d(e,"iif",(function(){return le})),n.d(e,"interval",(function(){return pe})),n.d(e,"merge",(function(){return be})),n.d(e,"never",(function(){return me})),n.d(e,"of",(function(){return K})),n.d(e,"onErrorResumeNext",(function(){return ge})),n.d(e,"pairs",(function(){return we})),n.d(e,"partition",(function(){return Pe})),n.d(e,"race",(function(){return Oe})),n.d(e,"range",(function(){return je})),n.d(e,"throwError",(function(){return J})),n.d(e,"timer",(function(){return Ae})),n.d(e,"using",(function(){return Re})),n.d(e,"zip",(function(){return Ue})),n.d(e,"scheduled",(function(){return Xt})),n.d(e,"EMPTY",(function(){return Y})),n.d(e,"NEVER",(function(){return ve})),n.d(e,"config",(function(){return u}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function a(t){setTimeout((function(){throw t}),0)}var c={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;a(t)},complete:function(){}},h=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function f(t){return null!==t&&"object"==typeof t}var l=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),d=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._ctorUnsubscribe,i=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var u=0;u<n.length;++u){n[u].remove(this)}if(o(i)){r&&(this._unsubscribe=void 0);try{i.call(this)}catch(t){e=t instanceof l?p(t.errors):[t]}}if(h(s)){u=-1;for(var a=s.length;++u<a;){var c=s[u];if(f(c))try{c.unsubscribe()}catch(t){e=e||[],t instanceof l?e=e.concat(p(t.errors)):e.push(t)}}}if(e)throw new l(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function p(t){return t.reduce((function(t,e){return t.concat(e instanceof l?e.errors:e)}),[])}var y=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),b=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!n){o.destination=c;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new v(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new v(o,n,r,i)}return o}return i(e,t),e.prototype[y]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(d),v=function(t){function e(e,n,r,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var a=u;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==c&&(o((a=Object.create(n)).unsubscribe)&&u.add(a.unsubscribe.bind(a)),a.unsubscribe=u.unsubscribe.bind(u))),u._context=a,u._next=s,u._error=r,u._complete=i,u}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):a(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;a(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;a(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(a(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(b);function m(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof b?r:null}return!0}var g=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function w(t){return t}function _(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return E(t)}function E(t){return 0===t.length?w:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof b)return t;if(t[y])return t[y]()}return t||e||n?new b(t,e,n):new b(c)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),m(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=x(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[g]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:E(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=x(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function x(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var I=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),P=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(d),O=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(b),T=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[y]=function(){return new O(this)},e.prototype.lift=function(t){var e=new k(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new I;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new I;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new I;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new I;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new I;return this.hasError?(t.error(this.thrownError),d.EMPTY):this.isStopped?(t.complete(),d.EMPTY):(this.observers.push(t),new P(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new k(t,e)},e}(S),k=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):d.EMPTY},e}(T);var j=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new C(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),C=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(b),A=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new d).add(this.source.subscribe(new M(this.getSubject(),this))),t.closed&&(this._connection=null,t=d.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new j(t));var t},e}(S),M=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(O);var R=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new d,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new U(n)),e.add(r.subscribe(t)),e},e}(S),U=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(d),B=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new I;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(T),L=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(d)),N=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(L),V=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),D=function(t){function e(n,r){void 0===r&&(r=V.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(V),F=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(D))(N),q=F,Y=new S((function(t){return t.complete()}));function $(t){return t?function(t){return new S((function(e){return t.schedule((function(){return e.complete()}))}))}(t):Y}function H(t){return t&&"function"==typeof t.schedule}var W,z=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function X(t,e){return new S((function(n){var r=new d,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function G(t,e){return e?X(t,e):new S(z(t))}function K(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return H(n)?(t.pop(),X(t,n)):G(t)}function J(t,e){return new S(e?function(n){return e.schedule(Q,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function Q(t){var e=t.error;t.subscriber.error(e)}W||(W={});var Z=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return K(this.value);case"E":return J(this.error);case"C":return $()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var tt=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new et(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(Z.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(Z.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(Z.createComplete()),this.unsubscribe()},e}(b),et=function(){return function(t,e){this.notification=t,this.destination=e}}(),nt=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){if(!this.isStopped){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift()}t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this.isStopped||(this._events.push(new rt(this._getNow(),e)),this._trimBufferThenGetEvents()),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new I;if(this.isStopped||this.hasError?e=d.EMPTY:(this.observers.push(t),e=new P(this,t)),i&&t.add(t=new tt(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||q).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(T),rt=function(){return function(t,e){this.time=t,this.value=e}}(),it=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),d.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),d.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(T),ot=1,st=function(){return Promise.resolve()}(),ut={};function at(t){return t in ut&&(delete ut[t],!0)}var ct=function(t){var e=ot++;return ut[e]=!0,st.then((function(){return at(e)&&t()})),e},ht=function(t){at(t)},ft=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=ct(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ht(n),e.scheduled=void 0)},e}(L),lt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(D))(ft),dt=lt,pt=new D(L),yt=pt,bt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(L),vt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(D))(bt),mt=vt,gt=function(t){function e(e,n){void 0===e&&(e=wt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(D),wt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(L);function _t(){}function Et(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var St=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),xt=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),It=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function Pt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Ot(t,e))}}var Ot=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Tt(t,this.project,this.thisArg))},t}(),Tt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(b);function kt(t,e,n){if(e){if(!H(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return kt(t,n).apply(void 0,r).pipe(Pt((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,s={context:o,subject:i,callbackFunc:t,scheduler:n};return new S((function(r){if(n){var u={args:e,subscriber:r,params:s};return n.schedule(jt,0,u)}if(!i){i=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){m(i)?i.error(t):console.warn(t)}}return i.subscribe(r)}))}}function jt(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,a=i.subject;if(!a){a=i.subject=new it;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(Ct,0,{value:r,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(r))}function Ct(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function At(t,e,n){if(e){if(!H(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return At(t,n).apply(void 0,r).pipe(Pt((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S((function(r){var o=i.context,s=i.subject;if(n)return n.schedule(Mt,0,{params:i,subscriber:r,context:o});if(!s){s=i.subject=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){m(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function Mt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,a=n.subject;if(!a){a=n.subject=new it;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(Ut,0,{err:r,subject:a}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(Rt,0,{value:i,subject:a}))}}]))}catch(t){this.add(u.schedule(Ut,0,{err:t,subject:a}))}}this.add(a.subscribe(r))}function Rt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Ut(t){var e=t.err;t.subject.error(e)}var Bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(b),Lt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(b);function Nt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Vt=Nt(),Dt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Ft(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var qt=function(t){if(t&&"function"==typeof t[g])return r=t,function(t){var e=r[g]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Dt(t))return z(t);if(Ft(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,a),t};if(t&&"function"==typeof t[Vt])return e=t,function(t){for(var n=e[Vt]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i=f(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Yt(t,e,n,r,i){if(void 0===i&&(i=new Lt(t,n,r)),!i.closed)return e instanceof S?e.subscribe(i):qt(e)(i)}var $t={};function Ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0,r=void 0;return H(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&h(t[0])&&(t=t[0]),G(t,r).lift(new Wt(n))}var Wt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new zt(t,this.resultSelector))},t}(),zt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push($t),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Yt(this,r,void 0,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n){var r=this.values,i=r[n],o=this.toRespond?i===$t?--this.toRespond:this.toRespond:0;r[n]=e,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Bt);function Xt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[g]}(t))return function(t,e){return new S((function(n){var r=new d;return r.add(e.schedule((function(){var i=t[g]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Ft(t))return function(t,e){return new S((function(n){var r=new d;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Dt(t))return X(t,e);if(function(t){return t&&"function"==typeof t[Vt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S((function(n){var r,i=new d;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[Vt](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Gt(t,e){return e?Xt(t,e):t instanceof S?t:new S(qt(t))}var Kt=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(b),Jt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(b);function Qt(t,e){if(!e.closed)return t instanceof S?t.subscribe(e):qt(t)(e)}function Zt(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(Zt((function(n,r){return Gt(t(n,r)).pipe(Pt((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new te(t,n))})}var te=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new ee(t,this.project,this.concurrent))},t}(),ee=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Kt(this),n=this.destination;n.add(e);var r=Qt(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Jt);function ne(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Zt(w,t)}function re(){return ne(1)}function ie(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return re()(K.apply(void 0,t))}function oe(t){return new S((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Gt(n):$()).subscribe(e)}))}function se(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(h(n))return ue(n,null);if(f(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return ue(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return ue(t=1===t.length&&h(t[0])?t[0]:t,null).pipe(Pt((function(t){return i.apply(void 0,t)})))}return ue(t,null)}function ue(t,e){return new S((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var a=Gt(t[u]),c=!1;n.add(a.subscribe({next:function(t){c||(c=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&c||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},a=0;a<r;a++)u(a);else n.complete()}))}function ae(t,e,n,r){return o(n)&&(r=n,n=void 0),r?ae(t,e,n).pipe(Pt((function(t){return h(t)?r.apply(void 0,t):r(t)}))):new S((function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var a=e;e.on(n,r),s=function(){return a.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var c=e;e.addListener(n,r),s=function(){return c.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var h=0,f=e.length;h<f;h++)t(e[h],n,r,i,o)}i.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function ce(t,e,n){return n?ce(t,e).pipe(Pt((function(t){return h(t)?n.apply(void 0,t):n(t)}))):new S((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}}))}function he(t,e,n,r,i){var o,s;if(1==arguments.length){var u=t;s=u.initialState,e=u.condition,n=u.iterate,o=u.resultSelector||w,i=u.scheduler}else void 0===r||H(r)?(s=t,o=w,i=r):(s=t,o=r);return new S((function(t){var r=s;if(i)return i.schedule(fe,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var u=void 0;try{u=e(r)}catch(e){return void t.error(e)}if(!u){t.complete();break}}var a=void 0;try{a=o(r)}catch(e){return void t.error(e)}if(t.next(a),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function fe(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function le(t,e,n){return void 0===e&&(e=Y),void 0===n&&(n=Y),oe((function(){return t()?e:n}))}function de(t){return!h(t)&&t-parseFloat(t)+1>=0}function pe(t,e){return void 0===t&&(t=0),void 0===e&&(e=yt),(!de(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=yt),new S((function(n){return n.add(e.schedule(ye,t,{subscriber:n,counter:0,period:t})),n}))}function ye(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function be(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return H(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:ne(n)(G(t,r))}var ve=new S(_t);function me(){return ve}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return Y;var n=t[0],r=t.slice(1);return 1===t.length&&h(n)?ge.apply(void 0,n):new S((function(t){var e=function(){return t.add(ge.apply(void 0,r).subscribe(t))};return Gt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function we(t,e){return new S(e?function(n){var r=Object.keys(t),i=new d;return i.add(e.schedule(_e,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function _e(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function Ee(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function Se(t,e){return function(n){return n.lift(new xe(t,e))}}var xe=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.predicate,this.thisArg))},t}(),Ie=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(b);function Pe(t,e,n){return[Se(e,n)(new S(qt(t))),Se(Ee(e,n))(new S(qt(t)))]}function Oe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!h(t[0]))return t[0];t=t[0]}return G(t,void 0).lift(new Te)}var Te=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ke(t))},t}(),ke=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=Yt(this,t[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},e.prototype.notifyNext=function(t,e,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(e)},e}(Bt);function je(t,e,n){return void 0===t&&(t=0),new S((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(Ce,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function Ce(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Ae(t,e,n){void 0===t&&(t=0);var r=-1;return de(e)?r=Number(e)<1?1:Number(e):H(e)&&(n=e),H(n)||(n=yt),new S((function(e){var i=de(t)?t:+t-n.now();return n.schedule(Me,i,{index:0,period:r,subscriber:e})}))}function Me(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function Re(t,e){return new S((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Gt(i):Y).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}function Ue(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),G(t,void 0).lift(new Be(n))}var Be=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Le(t,this.resultSelector))},t}(),Le=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;h(t)?e.push(new Ve(t)):"function"==typeof t[Vt]?e.push(new Ne(t[Vt]())):e.push(new De(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe());else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(b),Ne=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),Ve=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[Vt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),De=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[Vt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return Qt(this.observable,new Kt(this))},e}(Jt)},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.EmbeddedConnection=void 0;var r=n(4),i=n(5),o=function(){function e(){if(this.targetOrigin="*",this.onOpenCallback=null,this.onCloseCallback=null,this.onPacketCallback=null,this.compressor=null,this.decompressor=null,this.openerInterval=null,!window.parent)throw Error("EmbeddedConnection: missing window.parent")}return e.prototype.sendMessage=function(t){window.parent.postMessage(t,this.targetOrigin)},e.prototype.onOpen=function(t){this.onOpenCallback=t},e.prototype.onClose=function(t){this.onCloseCallback=t},e.prototype.onPacket=function(t){this.onPacketCallback=t},e.prototype.open=function(){this.messageListener?console.warn("EmbeddedConnection.open(): session is already opened"):(this.compressor=new r.Compressor,this.decompressor=new i.Decompressor,this.addMessageListener(),this.startSendOpen())},e.prototype.close=function(){this.stopSendOpen(),this.messageListener?this.sendMessage({close:!0}):console.warn("EmbeddedConnection.close(): session is not open")},e.prototype.sendPacket=function(t){this.sendMessage({packet:this.compressor.encode(t)})},e.prototype.addMessageListener=function(){var e=this;this.messageListener=function(n){if(n.source===window.parent)if(n.data.packet)if(e.onPacketCallback){var r=n.data.packet,i=t.from(r,0,r.byteLength),o=e.decompressor.decode(i);e.onPacketCallback(o)}else console.error("EmbeddedConnection: missing onPacket callback");else n.data.open?(e.stopSendOpen(),e.onOpenCallback&&e.onOpenCallback()):n.data.close&&(e.stopSendOpen(),e.removeMessageListener(),e.onCloseCallback&&e.onCloseCallback())},window.addEventListener("message",this.messageListener)},e.prototype.removeMessageListener=function(){window.removeEventListener("message",this.messageListener),this.messageListener=null},e.prototype.startSendOpen=function(){var t=this;this.sendMessage({open:!0}),this.openerInterval=setInterval((function(){t.openerInterval&&t.sendMessage({open:!0})}),200)},e.prototype.stopSendOpen=function(){this.openerInterval&&(clearInterval(this.openerInterval),this.openerInterval=null)},e}();e.EmbeddedConnection=o}).call(this,n(1).Buffer)},function(t,e,n){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Federation=void 0;var i=n(3),o=n(1),s=n(6),u=n(10),a=function(){function t(t,e){this.runtime=t,this.federationId=e,this.objectInstances={},this.undefinedInstances=[],this.objectClasses={},this.eventsObservers={},this.serviceProviders={}}return t._isObject=function(t){return t&&"object"==typeof t},t.prototype.objects=function(t){var e=this.objectClasses[t];return e||(e=new u.ObjectClass(this,t),this.objectClasses[t]=e),e},t.prototype.findObject=function(t){for(var e in this.objectInstances)if(this.objectInstances.hasOwnProperty(e)&&t(this.objectInstances[e]))return this.objectInstances[e];return null},t.prototype.getObjectOrNull=function(t){return this.objectInstances.hasOwnProperty(t)?this.objectInstances[t]:null},t.prototype.processNativeChanges=function(t){var e,n,o=this.getOrCreateObjectRef(t.i.$id);if(o._class||(o._class=t.c),!o.$class){var s=this.objects(o._class);o.$class=s;try{for(var a=r(s.propertyNames),c=a.next();!c.done;c=a.next()){var h=c.value;u.defineObjectProperty(this,o,h),o[h+"$changed"]=!1}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}}var f=t.t===i.ObjectChange.CREATE,l=t.t===i.ObjectChange.DELETE;f?o.$defined||this.undefinedInstances.push(o):l&&(o._defined=!1,o._defined$changed=!0);var d=t.p;if(d)for(var p in d){if(d.hasOwnProperty(p))u.defineObjectProperty(this,o,p),o["-"+p]=this.decodeObjectIds(d[p].v),f||(o[p+"$changed"]=!0)}if((l||o.$defined)&&(o.$class.subject.next(o),o._defined$changed=!1),l){delete this.objectInstances[t.i.$id];var y=this.undefinedInstances.findIndex((function(t){return t===o}));-1!==y&&delete this.undefinedInstances[y]}if(d)for(var p in d)d.hasOwnProperty(p)&&(o[p+"$changed"]=!1);this.defineUndefinedInstances()},t.prototype.defineUndefinedInstances=function(){for(var t=this;;){var e=this.undefinedInstances.findIndex((function(e){return!t.objectHasUndefinedRefs(e)}));if(-1===e)return;var n=this.undefinedInstances[e];for(var r in this.undefinedInstances.splice(e,1),n)n.hasOwnProperty(r)&&!r.startsWith("$")&&r.endsWith("$changed")&&(n[r]=!0);for(var r in n._defined=!0,n.$class.subject.next(n),n)n.hasOwnProperty(r)&&!r.startsWith("$")&&r.endsWith("$changed")&&(n[r]=!1)}},t.prototype.createObjectInstance=function(t){var e=this.getOrCreateObjectRef(s.generateObjectId());return e._class=t,e.$class=this.objects(t),e._defined=!0,this.runtime.sendObjectChangesToRuntime(this.federationId,e,t,i.ObjectChange.CREATE,null,null),e},t.prototype.objectPropertyChanged=function(t,e,n){this.runtime.sendObjectChangesToRuntime(this.federationId,t,t._class,i.ObjectChange.UPDATE,e,n)},t.prototype.getOrCreateObjectRef=function(t){var e=this,n=this.objectInstances[t];if(!n){var r={_defined:!1,_defined$changed:!1};Object.defineProperty(r,"$id",{get:function(){return t}}),Object.defineProperty(r,"$defined",{get:function(){return r._defined}}),Object.defineProperty(r,"$defined$changed",{get:function(){return r._defined$changed}}),Object.defineProperty(r,"$deletable",{get:function(){return!1}}),Object.defineProperty(r,"$deletable$wanted",{get:function(){return!1}}),Object.defineProperty(r,"$delete",{value:function(){e.runtime.sendObjectChangesToRuntime(e.federationId,{$id:t},r._class,i.ObjectChange.DELETE,null,null),r._defined=!1}}),n=r,this.objectInstances[t]=n}return n},t.prototype.decodeObjectIds=function(e){var n=this;if(null!=e){var r=e.$id;if(null!=r)return this.getOrCreateObjectRef(r);if(e instanceof o.Buffer)return e;if(e instanceof Array){var i=[];return e.forEach((function(t){return i.push(n.decodeObjectIds(t))})),i}if(t._isObject(e)){var s={};for(var u in e)e.hasOwnProperty(u)&&(s[u]=this.decodeObjectIds(e[u]));return s}}return e},t.prototype.objectHasUndefinedRefs=function(t){for(var e in t)if(t.hasOwnProperty(e)&&e.startsWith("-")&&t.hasOwnProperty(e.substr(1)+"$changed")&&this.valueHasUndefinedRefs(t[e]))return!0;return!1},t.prototype.valueHasUndefinedRefs=function(e){var n=this;if(null==e)return!1;var r=e.$id;if(null!=r)return!this.objectInstances.hasOwnProperty(r)||!this.objectInstances[r]._defined;if(e instanceof o.Buffer)return!1;if(e instanceof Array)return e.some((function(t){return n.valueHasUndefinedRefs(t)}));if(t._isObject(e)){for(var i in e)if(e.hasOwnProperty(i)&&this.valueHasUndefinedRefs(e[i]))return!0;return!1}return!1},t.prototype.observeEvents=function(t,e){this.eventsObservers[t]=e},t.prototype.dispatchEvent=function(t,e){this.dispatchEventScript(t,e),this.runtime.sendEventNotificationToRuntime(this.federationId,t,e)},t.prototype.dispatchEventScript=function(t,e){var n=this.eventsObservers[t];n&&n(e)},t.prototype.provideService=function(t,e){this.serviceProviders[t]=e},t.prototype.requestService=function(t,e){return this.requestLocalService(t,e)||this.runtime.sendServiceRequestToRuntime(this.federationId,t,e)},t.prototype.requestLocalService=function(t,e){var n=this.serviceProviders[t];return n?n(e):null},t}();e.Federation=a},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ObjectClass=e.defineObjectProperty=void 0;var o=Reflect.getOwnPropertyDescriptor,s=n(7);function u(t,e,n){if(!o(e,n)){var r="-"+n;Object.defineProperty(e,n,{enumerable:!0,get:function(){return e[r]},set:function(i){e[r]=i,t.objectPropertyChanged(e,n,i)}})}}e.defineObjectProperty=u;var a=function(){function t(t,e){this.federation=t,this.name=e,this.subject=new s.Subject,this.propertyNames=[]}return t.prototype.define=function(t){var e,n;try{for(var r=i(t),o=r.next();!o.done;o=r.next()){var s=o.value;this.propertyNames.push(s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t.prototype.create=function(t){var e,n,r=this.federation.createObjectInstance(this.name);try{for(var o=i(this.propertyNames),s=o.next();!s.done;s=o.next()){var a=s.value;u(this.federation,r,a)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}if(t)for(var a in t)t.hasOwnProperty(a)&&(u(this.federation,r,a),r[a]=t[a]);return r},t.prototype.subscribe=function(t,e,n){return this.subject.subscribe(t,e,n)},t.prototype[Symbol.iterator]=function(){var t,e,n,i,o,s;return r(this,(function(r){switch(r.label){case 0:for(n in t=this.federation.objectInstances,e=[],t)e.push(n);i=0,r.label=1;case 1:return i<e.length?(o=e[i],t.hasOwnProperty(o)&&(s=t[o])._defined&&s.$class===this?[4,s]:[3,3]):[3,4];case 2:r.sent(),r.label=3;case 3:return i++,[3,1];case 4:return[2]}}))},t.prototype.find=function(t){var e,n;try{for(var r=i(this),o=r.next();!o.done;o=r.next()){var s=o.value;if(t(s))return s}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return null},t}();e.ObjectClass=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputDevicePoster=void 0;var r=n(22),i=function(){function t(){this.inputDeviceAdapter=null,this.inputDeviceAdapter=new r.InputDeviceAdapter(this)}return t.prototype.keyDown=function(t){window.parent.postMessage({keyDown:{keyCode:t}},"*")},t.prototype.keyUp=function(t){window.parent.postMessage({keyUp:{keyCode:t}},"*")},t.prototype.mouseUpdate=function(t,e,n,r,i){window.parent.postMessage({mouseUpdate:{x:t,y:e,buttons:n,count:r,timestamp:i}},"*")},t.prototype.mouseWheel=function(t,e,n,r){window.parent.postMessage({mouseWheel:{x:t,y:e,dx:n,dy:r}},"*")},t}();e.InputDevicePoster=i},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(13),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(2))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,u,a=1,c={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",u=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",u,!1):t.attachEvent("onmessage",u),r=function(e){t.postMessage(s+e,"*")}),l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[a]=i,r(a),a++},l.clearImmediate=d}function d(t){delete c[t]}function p(t){if(h)setTimeout(p,0,t);else{var e=c[t];if(e){h=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{d(t),h=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(2),n(26))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RuntimeSession=void 0;var r=function(){};e.RuntimeSession=r},function(t,e,n){"use strict";(function(t,r){var i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.WebSocketConnection=void 0;var o=n(4),s=n(5),u=function(){function e(t){this.url=t,this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null}return e.toHexString=function(t){return Array.from(t,(function(t){return("0"+(255&t).toString(16)).slice(-2)})).join("")},e.prototype.reset=function(){this.webSocket=null,this.isOpen=!1,this.compressor=null,this.decompressor=null,this.queueOut=[],this.queueIn=[],this.reader=null},e.prototype.onOpen=function(t){this.onOpenCallback=t},e.prototype.onClose=function(t){this.onCloseCallback=t},e.prototype.onPacket=function(t){this.onPacketCallback=t},e.prototype.open=function(){var e=this;this.reopener||(this.reopener=t.setInterval((function(){e.webSocket||e.open()}),500)),this.onPacket&&(this.webSocket=new WebSocket(this.url,"warstage"),this.webSocket.addEventListener("open",(function(){var t,n;e.isOpen=!0,e.compressor=new o.Compressor,e.decompressor=new s.Decompressor,e.onOpenCallback&&e.onOpenCallback();try{for(var r=i(e.queueOut),u=r.next();!u.done;u=r.next()){var a=u.value,c=e.compressor.encode({p:a});e.webSocket.send(c.buffer)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}e.queueOut=[]})),this.webSocket.addEventListener("close",(function(){e.reset(),e.onCloseCallback&&e.onCloseCallback()})),this.webSocket.addEventListener("error",(function(){e.reset()})),this.webSocket.addEventListener("message",(function(t){e.queueIn.push(t.data),e.tryProcessQueueIn()})))},e.prototype.tryProcessQueueIn=function(){var t=this;if(!this.reader&&this.queueIn.length){var e=new FileReader;e.onload=function(){if(e===t.reader){t.reader=null;var n=e.result;try{var i=t.decompressor.decode(r.from(n,0,n.byteLength));t.onPacketCallback(i.p),t.tryProcessQueueIn()}catch(e){t.isOpen=!1,t.webSocket.close()}}},this.reader=e,e.readAsArrayBuffer(this.queueIn.shift())}},e.prototype.close=function(){this.isOpen=!1,this.webSocket&&this.webSocket.close(),this.reopener&&(clearInterval(this.reopener),this.reopener=null),this.reset()},e.prototype.sendPacket=function(t){if(this.isOpen){var e=this.compressor.encode({p:t});this.webSocket.send(e.buffer)}else this.queueOut.push(t)},e}();e.WebSocketConnection=u}).call(this,n(2),n(1).Buffer)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetLoader=void 0;var r=function(){function t(){}return t.getBasePath=function(t){var e=t.lastIndexOf("/");return-1===e?"":t.substring(0,e+1)},t.getBaseHref=function(e){return e.protocol+"//"+e.hostname+(e.port?":"+e.port:"")+t.getBasePath(e.pathname)},t.getDefaultBaseHref=function(e){return t.getBaseHref(window.location)+e},t.loadFromHttp=function(t){return new Promise((function(e,n){var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=function(){var t=r.response;t?e({data:new Uint8Array(t)}):n("no response")},r.onabort=function(e){n("aborted loading "+t)},r.onerror=function(e){n("error while loading "+t)},r.send(null)}))},t.loadJsonFromHttp=function(t){return new Promise((function(e,n){var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="json",r.onload=function(){e(r.response)},r.onabort=function(e){n("aborted loading "+t)},r.onerror=function(e){n("error while loading "+t)},r.send(null)}))},t.getServiceProvider=function(e){return void 0===e&&(e=t.getDefaultBaseHref("assets/")),function(n){return t.loadFromHttp(e+n.name)}},t.getJsonLoader=function(e){return void 0===e&&(e=t.getDefaultBaseHref("config/")),function(n){return t.loadJsonFromHttp(e+n)}},t}();e.AssetLoader=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MarkerColor=e.SkinType=e.PropulsionType=e.FormationType=void 0,function(t){t.Column="COLUMN",t.Line="LINE",t.Skirmish="SKIRMISH",t.Square="SQUARE",t.Wedge="WEDGE"}(e.FormationType||(e.FormationType={})),function(t){t.Biped="BIPED",t.Quadruped="QUADRUPED",t.Bicycle="BICYCLE",t.Dicycle="DICYCLE",t.Wheels="WHEELS",t.Tracks="TRACKS",t.HalfTrack="HALFTRACK"}(e.PropulsionType||(e.PropulsionType={})),function(t){t.Billboard="BILLBOARD"}(e.SkinType||(e.SkinType={})),function(t){t.Alliance="ALLIANCE",t.Commander="COMMANDER"}(e.MarkerColor||(e.MarkerColor={}))},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),s=r[0],u=r[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,s,u)),h=0,f=u>0?s-4:s;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],a[h++]=e>>16&255,a[h++]=e>>8&255,a[h++]=255&e;2===u&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,a[h++]=255&e);1===u&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,a[h++]=e>>8&255,a[h++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,u=n-i;s<u;s+=16383)o.push(h(t,s,s+16383>u?u:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,a=s.length;u<a;++u)r[u]=s[u],i[s.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],u=e;u<n;u+=3)i=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,u=8*i-r-1,a=(1<<u)-1,c=a>>1,h=-7,f=n?i-1:0,l=n?-1:1,d=t[e+f];for(f+=l,o=d&(1<<-h)-1,d>>=-h,h+=u;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===a)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=c}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,u,a,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-s))<1&&(s--,a*=2),(e+=s+f>=1?l/a:l*Math.pow(2,1-f))*a>=2&&(s++,a/=2),s+f>=h?(u=0,s=h):s+f>=1?(u=(e*a-1)*Math.pow(2,i),s+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&u,d+=p,u/=256,i-=8);for(s=s<<i|u,c+=i;c>0;t[n+d]=255&s,d+=p,s/=256,c-=8);t[n+d-p]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function u(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ConfigLoader=void 0;var s=function(){function t(t){this.objectLoader=t,this.objectCache={},this.errors={}}return t.prototype.load=function(t){if(this.errors.hasOwnProperty(t))return null;if(this.objectCache.hasOwnProperty(t))return this.objectCache[t];var e=this.loadAndResolve(t);return this.objectCache[t]=e,e},t.prototype.loadAndResolve=function(t){return r(this,void 0,void 0,(function(){var e,n;return i(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),[4,this.objectLoader(t)];case 1:return e=r.sent(),[4,this.resolve(e)];case 2:return[2,r.sent()];case 3:return n=r.sent(),this.errors[t]=n,[2,null];case 4:return[2]}}))}))},t.prototype.resolve=function(t){return r(this,void 0,void 0,(function(){var e,n,r,s,u,a,c,h,f,l,d,p,y,b,v;return i(this,(function(i){switch(i.label){case 0:return null==t?[2,t]:("string"==typeof t||t instanceof String)&&t.startsWith("<")&&t.endsWith(">")?[4,this.load(t.substring(1,t.length-1))]:[3,2];case 1:return[2,(c=i.sent())||t];case 2:if(!(t instanceof Array))return[3,11];c=[],i.label=3;case 3:i.trys.push([3,8,9,10]),e=o(t),n=e.next(),i.label=4;case 4:return n.done?[3,7]:(r=n.value,u=(s=c).push,[4,this.resolve(r)]);case 5:u.apply(s,[i.sent()]),i.label=6;case 6:return n=e.next(),[3,4];case 7:return[3,10];case 8:return a=i.sent(),b={error:a},[3,10];case 9:try{n&&!n.done&&(v=e.return)&&v.call(e)}finally{if(b)throw b.error}return[7];case 10:return[2,c];case 11:if("object"!=typeof t)return[3,16];for(f in c={},h=[],t)h.push(f);l=0,i.label=12;case 12:return l<h.length?(d=h[l],t.hasOwnProperty(d)?(p=c,y=d,[4,this.resolve(t[d])]):[3,14]):[3,15];case 13:p[y]=i.sent(),i.label=14;case 14:return l++,[3,12];case 15:return[2,c];case 16:return[2,t]}}))}))},t}();e.ConfigLoader=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputDeviceAdapter=void 0;var r=function(){function t(t){var e=this;this.observer=t,this.canvas=null,this.activeTextInput=!1,this.trackMouse=!1,this.keysDown={},this.mouseX=0,this.mouseY=0,this.buttons=0,this.mousedownTimestamp=null,this.mouseupX=0,this.mouseupY=0,this.clickCount=0,window.addEventListener("focus",(function(t){return e.handleFocusEvent(t)}),!0),window.addEventListener("blur",(function(){return e.handleBlurEvent()}),!0),window.addEventListener("keydown",(function(t){return e.handleKeyDownEvent(t)})),window.addEventListener("keyup",(function(t){return e.handleKeyUpEvent(t)})),window.addEventListener("mousedown",(function(t){return e.handleMouseDownEvent(t)}),!0),window.addEventListener("mouseup",(function(t){return e.handleMouseUpEvent(t)}),!0),window.addEventListener("mousemove",(function(t){return e.handleMouseMoveEvent(t)}),!0),window.addEventListener("DOMMouseScroll",(function(t){return e.handleMouseWheelEvent(t)})),window.addEventListener("mousewheel",(function(t){return e.handleMouseWheelEvent(t)})),window.addEventListener("wheel",(function(t){return e.handleMouseWheelEvent(t)})),document.addEventListener("contextmenu",(function(t){return e.handleContextMenuEvent(t)}),!1),setInterval((function(){if(e.buttons)try{var t=new Event("timestamp");e.mouseUpdate(t.timeStamp)}catch(t){}}),33)}return t.isWithinDistance=function(t,e,n,r,i){var o=t-n,s=e-r;return o*o+s*s<=i*i},t.shouldTrackGesture=function(e,n){for(var r=document.elementFromPoint(e,n);r;r=r.parentNode)if(t.isClickable(r)&&t.hasOpacity(r))return!1;return!0},t.shouldTrackWheel=function(e){for(var n=document.elementFromPoint(e.clientX,e.clientY);n;n=n.parentNode)if(t.isScrollable(n))return!1;return!0},t.hasOpacity=function(t){for(;t;){if(t.style&&"0"===t.style.opacity)return!1;t=t.parentNode}return!0},t.isClickable=function(t){if("INPUT"===t.tagName||"BUTTON"===t.tagName)return!0;if(t.className){var e=" "+t.className+" ";return-1!==e.indexOf(" clickable ")||-1!==e.indexOf(" panel ")}return!1},t.isScrollable=function(t){if("scroll"===t.overflowY)return!0;if(t.className&&-1!==(" "+t.className+" ").indexOf(" scrollable "))return!0;return!1},t.normalizeMouseWheelDelta=function(t){var e=t.deltaY;return e&&t.wheelDelta?e/4:Math.abs(e)<52.95000076293945?10*e:e/52.95000076293945},t.prototype.getCanvas=function(){return this.canvas||(this.canvas=document.getElementById("canvas")),this.canvas},t.prototype.mouseUpdate=function(t){this.observer.mouseUpdate(this.mouseX,this.mouseY,this.buttons,this.clickCount,t)},t.prototype.mouseWheel=function(t,e,n,r){this.observer.mouseWheel(t,e,n,r)},t.prototype.handleFocusEvent=function(t){this.activeTextInput="INPUT"===t.target.tagName},t.prototype.handleBlurEvent=function(){this.activeTextInput=!1},t.prototype.handleKeyDownEvent=function(t){if(!this.activeTextInput&&!(t.ctrlKey||t.shiftKey||t.altKey||t.metaKey)){var e=t.keyCode;this.keysDown[e]=!0,this.observer.keyDown(t.keyCode),t.preventDefault()}},t.prototype.handleKeyUpEvent=function(t){var e=t.keyCode;this.keysDown[e]&&(this.keysDown[e]=!1,this.observer.keyUp(t.keyCode))},t.prototype.handleMouseDownEvent=function(e){if(!this.trackMouse&&this.shouldTrackMouse(e)&&(this.trackMouse=!0),this.trackMouse){if(this.mouseX=e.pageX,this.mouseY=window.innerHeight-e.pageY,null!=this.mousedownTimestamp&&e.timeStamp-this.mousedownTimestamp<500&&t.isWithinDistance(this.mouseX,this.mouseY,this.mouseupX,this.mouseupY,12)?this.clickCount+=1:this.clickCount=1,this.mousedownTimestamp=e.timeStamp,void 0!==e.buttons)this.buttons=e.buttons;else switch(e.button){case 0:this.buttons|=1;break;case 1:this.buttons|=4;break;case 2:this.buttons|=2}this.mouseUpdate(e.timeStamp),e.stopPropagation(),e.preventDefault();var n=this.getCanvas();n&&n.setCapture&&n.setCapture()}},t.prototype.handleMouseUpEvent=function(t){if(this.trackMouse){if(this.mouseX=t.pageX,this.mouseY=window.innerHeight-t.pageY,this.mouseupX=this.mouseX,this.mouseupY=this.mouseY,void 0!==t.buttons)this.buttons=t.buttons;else switch(t.button){case 0:this.buttons&=6;break;case 1:this.buttons&=3;break;case 2:this.buttons&=5}this.mouseUpdate(t.timeStamp),t.stopPropagation(),t.preventDefault(),t.buttons||(this.trackMouse=!1)}},t.prototype.handleMouseMoveEvent=function(t){this.trackMouse&&(this.mouseX=t.pageX,this.mouseY=window.innerHeight-t.pageY,this.mouseUpdate(t.timeStamp),t.stopPropagation(),t.preventDefault())},t.prototype.handleMouseWheelEvent=function(e){if(t.shouldTrackWheel(e)){var n=-2*t.normalizeMouseWheelDelta(e);this.mouseWheel(e.pageX,window.innerHeight-e.pageY,0,n),e.stopPropagation()}},t.prototype.handleContextMenuEvent=function(t){this.shouldTrackMouse(t)&&t.preventDefault()},t.prototype.shouldTrackMouse=function(e){return e.target===this.canvas||t.shouldTrackGesture(e.clientX,e.clientY)},t}();e.InputDeviceAdapter=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function u(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Navigator=void 0;var o=n(7),s=n(11),u=function(){function t(t){var e=this;this.runtime=t,this.inputDevicePoster=null,this.system={onChangePlayer:new o.Subject,federation:null,player:null,launcher:null},this.lobby={onEnterLobby:new o.Subject,onLeaveLobby:new o.Subject,onEnterMatch:new o.Subject,onLeaveMatch:new o.Subject,federation:null,module:null,match:null,owner:!1},this.battle={onEnterBattle:new o.Subject,onLeaveBattle:new o.Subject,federation:null,owner:!1},this.inputDevicePoster=new s.InputDevicePoster,this.system.federation=this.runtime.joinFederation("000000000000000000000000"),this.system.federation.objects("Player").subscribe((function(t){e.playerChanged_(t)})),this.system.federation.objects("Launcher").subscribe((function(t){e.launcherChanged_(t)}))}return t.prototype.playerChanged_=function(t){t.$defined$changed&&t.$defined&&(this.system.player=t),(t.playerId$changed||t.playerName$changed||t.playerIcon$changed)&&this.runtime.authenticate("",t.playerId||"",t.playerName||"",t.playerIcon||""),this.system.onChangePlayer.next(t)},t.prototype.launcherChanged_=function(t){var e=this;t.$defined$changed&&t.$defined&&(this.system.launcher=t),t.lobbyId$changed&&t.lobbyId&&(this.lobby.federation&&this.lobby.federation.federationId!==t.lobbyId&&(this.runtime.leaveFederation(this.lobby.federation.federationId),this.lobby.federation=null,this.lobby.module=null),this.lobby.federation||(this.lobby.federation=this.runtime.joinFederation(t.lobbyId),this.lobby.federation.objects("Module").subscribe((function(t){t.$defined$changed&&(e.lobby.module=t.$defined?t:null)})),this.lobby.onEnterLobby.next())),t.matchId$changed&&this.launcherMatchIdChanged()},t.prototype.launcherMatchIdChanged=function(){var t=this.system.launcher.matchId;t!==(this.lobby.match?this.lobby.match.$id:null)&&(this.battle.federation&&(this.battle.onLeaveBattle.next(),this.runtime.leaveFederation(this.battle.federation.federationId),this.battle.federation=null),this.lobby.match&&(this.lobby.onLeaveMatch.next(),this.lobby.match=null),t&&(this.lobby.match=this.lobby.federation.getObjectOrNull(t),this.lobby.onEnterMatch.next(),this.battle.federation=this.runtime.joinFederation(t),this.battle.onEnterBattle.next()))},t.prototype.navigateToModule=function(t){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.system.federation.requestService("LaunchModule",{moduleUrl:t})];case 1:return e.sent(),[2]}}))}))},t.prototype.navigateToMatch=function(t){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.system.federation.requestService("EnterMatch",{lobbyId:this.lobby.federation.federationId,matchId:t})];case 1:return e.sent(),this.lobby.federation?[4,this.lobby.federation.requestService("JoinMatchAsSpectator",{match:{$id:t}})]:[3,3];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))},t.prototype.createMatch=function(t){return r(this,void 0,void 0,(function(){var e,n;return i(this,(function(r){switch(r.label){case 0:return[4,this.system.federation.requestService("CreateMatch",{lobbyId:this.lobby.federation.federationId,params:t})];case 1:return e=r.sent(),n=e.matchId,this.battle.federation=this.runtime.joinFederation(n),this.battle.onEnterBattle.next(),[4,this.pingBattleServices_()];case 2:return r.sent(),[2,this.lobby.federation.getObjectOrNull(n)]}}))}))},t.prototype.pingBattleServices_=function(){return r(this,void 0,void 0,(function(){var t,e;return i(this,(function(n){switch(n.label){case 0:t=0,n.label=1;case 1:0,n.label=2;case 2:return n.trys.push([2,4,,8]),[4,this.battle.federation.requestService("PingBattleServices",{})];case 3:return n.sent(),[2];case 4:return e=n.sent(),t++<10?[4,new Promise((function(t){return setTimeout(t,100)}))]:[3,6];case 5:return n.sent(),[3,7];case 6:throw e;case 7:return[3,8];case 8:return[3,1];case 9:return[2]}}))}))},t}();e.Navigator=u},function(t,e,n){"use strict";(function(t,r){var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.Runtime=void 0,n(13);var u=n(9),a=n(3),c=n(14),h=n(7),f=function(e){function n(){var t=e.call(this)||this;return t.configuration=null,t.federations={},t.onStartup=new h.Subject,t.onError=null,t.connection=null,t.connectionIsOpen=!1,t.serviceRequests={},t.lastServiceRequestId=0,t.authentication=null,t.outgoingPayloads=[],t.outgoingMessages=[],t.outgoingImmediate=null,t}return o(n,e),n.toError=function(t){if(null==t)return null;if("[object Error]"===Object.prototype.toString.call(t))return t;if(t.message){var e=t.stackX?t.stackX:t.stack?t.stack:t.file?t.name+": "+t.message+"\n  at "+t.file+":"+t.line+" ("+t.file+":"+t.line+":1)":null;return(n=new Error(t.message)).name=t.name,n.stack=e||"",e&&(n.stackX=e),n}try{var n;return(n=new Error(JSON.stringify(t))).stack="",n}catch(t){}return t},n.toReason=function(t){return{name:Object.prototype.toString.call(t),message:t.message,stack:t.stack}},n.prototype.startup=function(t){var e=this;this.configuration=t,this.connection=this.configuration.newConnection(),this.connection.onOpen((function(){e.connectionIsOpen=!0;var t=e.outgoingPayloads;for(var n in e.outgoingPayloads=null,e.enqueueOrSendOutgoingPayload({m:a.PacketType.Handshake,id:e.configuration.processId,pt:e.configuration.processType}),e.configuration.subjectId&&e.enqueueOrSendOutgoingPayload({m:a.PacketType.Authenticate,a:"",s:e.configuration.subjectId,n:"",i:""}),e.federations)e.federations.hasOwnProperty(n)&&e.enqueueOrSendOutgoingPayload({m:a.PacketType.FederationAdded,x:n,id:e.configuration.processId});e.trySendAuthenticateMessage(),e.outgoingPayloads=t})),this.connection.onClose((function(){e.connectionIsOpen=!1})),this.connection.onPacket((function(t){try{e.dispatchPacket(t)}catch(t){e.onError&&e.onError(t)}})),this.connection.open(),this.onStartup.next(),this.onStartup.complete()},n.prototype.authenticate=function(t,e,n,r){this.authentication={accessToken:t,subjectId:e,nickname:n,imageUrl:r},this.trySendAuthenticateMessage()},n.prototype.trySendAuthenticateMessage=function(){this.connectionIsOpen&&this.authentication&&this.enqueueOrSendOutgoingPayload({m:a.PacketType.Authenticate,a:this.authentication.accessToken,s:this.authentication.subjectId,n:this.authentication.nickname,i:this.authentication.imageUrl})},n.prototype.joinFederation=function(t){var e=new u.Federation(this,t);return this.federations[t]=e,this.connectionIsOpen&&this.enqueueOrSendOutgoingPayload({m:a.PacketType.FederationAdded,x:t,id:this.configuration.processId}),e},n.prototype.leaveFederation=function(t){this.federations.hasOwnProperty(t)&&(this.enqueueOrSendOutgoingPayload({m:a.PacketType.FederationRemoved,x:t,id:this.configuration.processId}),delete this.federations[t])},n.prototype.dispatchPacket=function(t){var e,n;if(t.m===a.PacketType.Messages)try{for(var r=s(t.mm),i=r.next();!i.done;i=r.next()){var o=i.value;switch(o.m){case a.MessageType.ObjectChanges:this._dispatchObjectChangesFromRemote(o);break;case a.MessageType.EventDispatch:this._dispatchEventFromRemote(o);break;case a.MessageType.ServiceRequest:this._dispatchServiceRequestFromRemote(o);break;case a.MessageType.ServiceFulfill:this._dispatchServiceFulfillFromRemote(o);break;case a.MessageType.ServiceReject:this._dispatchServiceRejectFromRemote(o)}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},n.prototype.sendObjectChangesToRuntime=function(t,e,n,r,i,o){var s={};null!=i&&(s[i]={v:o,t:0}),this.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ObjectChanges,x:t,i:e,c:n,t:r,p:s}]})},n.prototype.sendEventNotificationToRuntime=function(t,e,n){this.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.EventDispatch,x:t,e:e,v:n}]})},n.prototype.sendServiceRequestToRuntime=function(t,e,n){var r=this,i=++this.lastServiceRequestId;return new Promise((function(o,s){r.serviceRequests[i]={federationId:t,resolve:o,reject:s};try{r.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ServiceRequest,x:t,s:e,r:i,v:n}]})}catch(t){delete r.serviceRequests[i],s(t)}}))},n.prototype.enqueueOrSendOutgoingPayload=function(t){var e,n;if(this.connectionIsOpen){if(this.outgoingPayloads){try{for(var r=s(this.outgoingPayloads),i=r.next();!i.done;i=r.next()){var o=i.value;this.connection.sendPacket(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}this.outgoingPayloads=null}t.m===a.PacketType.Messages?this.enqueueOutgoingMessages(t.mm):(this.flushOutgoingMessages(),this.connection.sendPacket(t))}else this.outgoingPayloads.push(t)},n.prototype.enqueueOutgoingMessages=function(e){var n,r,i=this;try{for(var o=s(e),u=o.next();!u.done;u=o.next()){var a=u.value;this.outgoingMessages.push(a)}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.outgoingImmediate||(this.outgoingImmediate=t((function(){i.outgoingImmediate=null,i.flushOutgoingMessages()})))},n.prototype.flushOutgoingMessages=function(){this.outgoingMessages.length&&(this.connection.sendPacket({m:a.PacketType.Messages,mm:this.outgoingMessages}),this.outgoingMessages=[]),this.outgoingImmediate&&(r(this.outgoingImmediate),this.outgoingImmediate=null)},n.prototype._dispatchObjectChangesFromRemote=function(t){var e=this.federations[t.x];e&&e.processNativeChanges(t)},n.prototype._dispatchEventFromRemote=function(t){var e=this.federations[t.x];if(e){var n=e.decodeObjectIds(t.v);e.dispatchEventScript(t.e,n)}},n.prototype._dispatchServiceRequestFromRemote=function(t){var e=this,r=this.federations[t.x];if(!r)return this.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ServiceReject,r:t.r,v:n.toReason(new Error("unknown federation: "+t.x))}]});var i=r.decodeObjectIds(t.v),o=r.requestLocalService(t.s,i);if(!o)return this.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ServiceReject,r:t.r,v:n.toReason(new Error("unknown service: "+t.s))}]});o.then((function(n){e.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ServiceFulfill,r:t.r,v:n}]})})).catch((function(r){e.enqueueOrSendOutgoingPayload({m:a.PacketType.Messages,mm:[{m:a.MessageType.ServiceReject,r:t.r,v:n.toReason(r)}]})}))},n.prototype._dispatchServiceFulfillFromRemote=function(t){var e=this.serviceRequests[t.r];if(e){delete this.serviceRequests[t.r];var n=this.federations[e.federationId];if(n){var r=n.decodeObjectIds(t.v);e.resolve(r)}else e.reject(new Error("federation not found"))}else console.error("_dispatchServiceFulfillFromRemote: request "+t.r+" not found")},n.prototype._dispatchServiceRejectFromRemote=function(t){var e=this.serviceRequests[t.r];if(e){delete this.serviceRequests[t.r];var r=this.federations[e.federationId];if(r){var i=r.decodeObjectIds(t.v);e.reject(n.toError(i))}else e.reject(new Error("federation not found"))}else console.error("_dispatchServiceRejectFromRemote: request "+t.r+" not found")},n}(c.RuntimeSession);e.Runtime=f}).call(this,n(12).setImmediate,n(12).clearImmediate)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var a,c=[],h=!1,f=-1;function l(){h&&a&&(h=!1,a.length?c=a.concat(c):f=-1,c.length&&d())}function d(){if(!h){var t=u(l);h=!0;for(var e=c.length;e;){for(a=c,c=[];++f<e;)a&&a[f].run();f=-1,e=c.length}a=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||h||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RuntimeConfiguration=void 0;var r=n(3),i=n(6),o=n(15),s=n(8),u=function(){function t(){}return t.tryAutoRedirect=function(){return window===window.parent&&(window.location.href="https://warstage.net/index.html#"+window.location.toString(),!0)},t.autoDetect=function(){var e=new t,n=new URLSearchParams(document.location.search.substring(1)),u=n.get("connect");u?(e.newConnection=function(){return new o.WebSocketConnection(u)},e.processType=r.ProcessType.Agent):(e.newConnection=function(){return new s.EmbeddedConnection},e.processType=r.ProcessType.Module);var a=n.get("pt");return a&&(e.processType=Number(a)),e.processId=n.get("pid")||i.generateObjectId(),e.subjectId=n.get("sub"),e},t}();e.RuntimeConfiguration=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";function r(t){var e=t;return"number"==typeof e.x&&"number"==typeof e.y?"number"==typeof e.z?"number"==typeof e.w?[e.x,e.y,e.z,e.w]:[e.x,e.y,e.z]:[e.x,e.y]:t}function i(t,e){t=r(t),e=r(e);var n=[],i=t.length;if("number"==typeof e)for(var o=0;o!==i;++o)n.push(t[o]/e);else for(o=0;o!==i;++o)n.push(t[o]/e[o]);return n}function o(t,e){t=r(t),e=r(e);var n=t.length;if(e.length!==n)return!1;for(var i=0;i!==n;++i)if(t[i]!==e[i])return!1;return!0}function s(t){return t=r(t),Math.atan2(t[1],t[0])}function u(t){return Math.sqrt(a(t))}function a(t){for(var e=0,n=(t=r(t)).length,i=0;i!==n;++i)e+=t[i]*t[i];return e}function c(t,e){t=r(t),e=r(e);for(var n=0,i=Math.max(t.length,e.length),o=0;o!==i;++o){var s=(t[o]||0)-(e[o]||0);n+=s*s}return n}function h(t,e){return[t*Math.cos(e),t*Math.sin(e)]}Object.defineProperty(e,"__esModule",{value:!0}),e.rotate=e.fromPolar=e.distance2=e.distance=e.normalize=e.length2=e.length=e.angle=e.dot=e.notEqual=e.equal=e.div=e.mul=e.sub=e.add=void 0,e.add=function(t,e){t=r(t),e=r(e);var n=[],i=t.length;if("number"==typeof e)for(var o=0;o!==i;++o)n.push(t[o]+e);else for(o=0;o!==i;++o)n.push(t[o]+e[o]);return n},e.sub=function(t,e){t=r(t),e=r(e);var n=[],i=t.length;if("number"==typeof e)for(var o=0;o!==i;++o)n.push(t[o]-e);else for(o=0;o!==i;++o)n.push(t[o]-e[o]);return n},e.mul=function(t,e){t=r(t),e=r(e);var n=[],i=t.length;if("number"==typeof e)for(var o=0;o!==i;++o)n.push(t[o]*e);else for(o=0;o!==i;++o)n.push(t[o]*e[o]);return n},e.div=i,e.equal=o,e.notEqual=function(t,e){return!o(t,e)},e.dot=function(t,e){t=r(t),e=r(e);for(var n=0,i=t.length,o=0;o!==i;++o)n+=t[o]*e[o];return n},e.angle=s,e.length=u,e.length2=a,e.normalize=function(t){var e=u(t);return e>1e-6?i(t,e):function(t){for(var e=[],n=0;n!==t;++n)e.push(0===n?1:0);return e}(r(t).length)},e.distance=function(t,e){return Math.sqrt(c(t,e))},e.distance2=c,e.fromPolar=h,e.rotate=function(t,e){return h(u(t),s(t)+e)}},function(t,e,n){"use strict";n.r(e);var r=n(0),i=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function u(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},s=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=function(){function t(t){this.navigator=t,this.started=!1,this.waveNumber=0,this.config=null}return t.findNearestUnit=function(t,e){var n,i=null;return t.forEach((function(t){var o=r.Vector.distance2(e,t.center);(null==i||o<n)&&(i=t,n=o)})),i},t.findClusterCenter=function(e){if(0===e.length)return[512,512];var n=t.findCenterUnit(e).center,i=0,o=0,s=0;return e.forEach((function(t){var e=t.center,u=1/(50+r.Vector.distance(e,n));i+=u*e[0],o+=u*e[1],s+=u})),[i/s,o/s]},t.findCenterUnit=function(t){if(0===t.length)return null;var e=[];return t.forEach((function(n){var i=0;t.forEach((function(t){t!==n&&(i+=1/(1+r.Vector.distance(t.center,n.center)))})),e.push({u:n,w:i})})),e.sort((function(t,e){return t.w-e.w})),e[0].u},t.prototype.getParams=function(){return{teamsMin:1,teamsMax:1,teams:[{slots:[{playerId:this.navigator.system.player.playerId}]}],title:"practice",map:"Maps/Practice.png",options:{map:!0,teams:!0},started:!1}},t.prototype.startup=function(t){var e=this;this.match=t,this.navigator.battle.federation.provideService("_LoadTexture",r.AssetLoader.getServiceProvider()),this.tryStartMatch(),this.subscription=this.navigator.lobby.federation.objects("Match").subscribe((function(t){t===e.match&&e.tryStartMatch()})),this.subscription.add(this.navigator.battle.federation.objects("Unit").subscribe((function(t){(t.fighters$changed&&!t.fighters||t.deletedByGesture)&&t.$delete()}))),this.loadConfig().then((function(){}),(function(t){console.log(t)}))},t.prototype.loadConfig=function(){return i(this,void 0,void 0,(function(){var t,e,n,i,u,a,c,h,f,l,d,p,y,b,v,m;return o(this,(function(o){switch(o.label){case 0:return t=new r.ConfigLoader(r.AssetLoader.getJsonLoader()),e=this,[4,t.load("config.json")];case 1:e.config=o.sent();try{for(n=s(this.config.vegetation.shapes),i=n.next();!i.done;i=n.next())c=i.value,this.navigator.battle.federation.objects("Shape").create(c)}catch(t){d={error:t}}finally{try{i&&!i.done&&(p=n.return)&&p.call(n)}finally{if(d)throw d.error}}try{for(u=s(this.config.particles.shapes),a=u.next();!a.done;a=u.next())c=a.value,this.navigator.battle.federation.objects("Shape").create(c)}catch(t){y={error:t}}finally{try{a&&!a.done&&(b=u.return)&&b.call(u)}finally{if(y)throw y.error}}try{for(h=s(Object.values(this.config.units)),f=h.next();!f.done;f=h.next())l=f.value,this.navigator.battle.federation.objects("Shape").create(l.shape)}catch(t){v={error:t}}finally{try{f&&!f.done&&(m=h.return)&&m.call(h)}finally{if(v)throw v.error}}return[2]}}))}))},t.prototype.shutdown=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null),this.commandInterval&&(clearInterval(this.commandInterval),this.commandInterval=null),this.outcomeInterval&&(clearInterval(this.outcomeInterval),this.outcomeInterval=null)},t.prototype.tryStartMatch=function(){this.match.started&&!this.started&&(this.started=!0,this.onMatchStarted())},t.prototype.onMatchStarted=function(){var t=this;this.setupAlliancesAndCommanders(),this.spawnPlayerUnits(this.playerCommanders),this.issueCommands(),this.commandInterval=setInterval((function(){t.issueCommands()}),2e3),this.updateOutcome(),this.outcomeInterval=setInterval((function(){t.updateOutcome()}),250)},t.prototype.updateOutcome=function(){var t,e,n,r,i=0;try{for(var o=s(this.navigator.battle.federation.objects("TeamKills")),u=o.next();!u.done;u=o.next()){var a=u.value;a.alliance===this.enemyAlliance&&(i=a.kills)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}try{for(var c=s(this.match.teams),h=c.next();!h.done;h=c.next()){var f=h.value;f.score!==i&&this.navigator.lobby.federation.requestService("UpdateTeam",{team:f,outcome:"Kills: "+i,score:i}).then((function(){}),(function(t){console.error(t)}))}}catch(t){n={error:t}}finally{try{h&&!h.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}},t.prototype.setupAlliancesAndCommanders=function(){var t,e,n,r;this.enemyAlliance=this.navigator.battle.federation.objects("Alliance").create({position:2}),this.enemyCommander=this.navigator.battle.federation.objects("Commander").create({alliance:this.enemyAlliance,playerId:"$"}),this.playerAlliance=this.navigator.battle.federation.objects("Alliance").create({position:1}),this.playerCommanders=[];try{for(var i=s(this.match.teams),o=i.next();!o.done;o=i.next()){var u=o.value;try{for(var a=(n=void 0,s(u.slots)),c=a.next();!c.done;c=a.next()){var h=c.value;this.playerCommanders.push(this.navigator.battle.federation.objects("Commander").create({alliance:this.playerAlliance,playerId:h.playerId}))}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}},t.prototype.spawnPlayerUnits=function(t){var e=0,n=t.length,i=[512,512],o=.5*Math.PI;this.makePlayerUnit(t[e++%n],this.config.units.sam_bow,r.Vector.add(i,[-50,0]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_arq,r.Vector.add(i,[0,0]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_bow,r.Vector.add(i,[50,0]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_yari,r.Vector.add(i,[-25,-30]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_yari,r.Vector.add(i,[25,-30]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_kata,r.Vector.add(i,[-50,-60]),o),this.makePlayerUnit(t[e++%n],this.config.units.gen_kata,r.Vector.add(i,[0,-60]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_kata,r.Vector.add(i,[50,-60]),o),this.makePlayerUnit(t[e++%n],this.config.units.cav_yari,r.Vector.add(i,[-70,-100]),o),this.makePlayerUnit(t[e++%n],this.config.units.sam_nagi,r.Vector.add(i,[0,-90]),o),this.makePlayerUnit(t[10%n],this.config.units.cav_bow,r.Vector.add(i,[70,-100]),o)},t.prototype.makePlayerUnit=function(t,e,n,r){this.navigator.battle.federation.objects("Unit").create({alliance:this.playerAlliance,commander:t,unitType:e.unitType,marker:e.marker,"stats.placement":{x:n[0],y:n[1],z:r}})},t.prototype.issueCommands=function(){var e,n,i=this,o=[],u=[];try{for(var a=s(this.navigator.battle.federation.objects("Unit")),c=a.next();!c.done;c=a.next()){var h=c.value;if(!h.routed&&null!=h.center)(this.playerAlliance===h.alliance?o:u).push(h)}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}if(0!==o.length)if(0!==u.length){var f=t.findClusterCenter(o),l=t.findClusterCenter(u);u.forEach((function(e){var n=e.center,s=t.findNearestUnit(o,n);if(s){var u=s.center,a=e["stats.maximumRange"];if(a>0){var c=r.Vector.sub(u,n);if((d=r.Vector.length(c))>.9*a){var h=r.Vector.sub(u,r.Vector.mul(c,.9*a/d));i.navigator.battle.federation.requestService("UpdateCommand",{unit:e,path:[h],facing:r.Vector.angle(r.Vector.sub(h,n)),running:!1}).then((function(){}),(function(t){console.error(t)}))}else if(d<.5*a){h=r.Vector.sub(u,r.Vector.mul(c,.7*a/d));i.navigator.battle.federation.requestService("UpdateCommand",{unit:e,path:[h],facing:r.Vector.angle(r.Vector.sub(h,n)),running:!0}).then((function(){}),(function(t){console.error(t)}))}else i.navigator.battle.federation.requestService("UpdateCommand",{unit:e,path:[],facing:r.Vector.angle(r.Vector.sub(u,n)),running:!1}).then((function(){}),(function(t){console.error(t)}))}else if(r.Vector.distance(u,n)<80)i.navigator.battle.federation.requestService("UpdateCommand",{unit:e,path:[u],facing:r.Vector.angle(r.Vector.sub(u,n)),running:!1}).then((function(){}),(function(t){console.error(t)}));else{var d;c=r.Vector.sub(n,l);(d=r.Vector.length(c))>100&&(c=r.Vector.mul(c,100/d));h=r.Vector.add(f,c);i.navigator.battle.federation.requestService("UpdateCommand",{unit:e,path:[h],facing:r.Vector.angle(r.Vector.sub(h,n)),running:!1}).then((function(){}),(function(t){console.error(t)}))}}}))}else this.spawnEnemyUnits(o)},t.prototype.spawnEnemyUnits=function(e){var n=t.findClusterCenter(e),i=r.Vector.normalize(r.Vector.sub([512,512],n)),o=r.Vector.add(n,r.Vector.mul(i,200)),s=r.Vector.angle(i)+.5*Math.PI;this.makeEnemyUnits(o,s),6==++this.waveNumber&&(this.waveNumber=0)},t.prototype.makeEnemyUnits=function(t,e){var n=.5*Math.PI-e;switch(this.waveNumber){case 0:this.makeEnemyUnit(this.config.units.ash_yari,r.Vector.add(t,r.Vector.rotate([-90,0],e)),n),this.makeEnemyUnit(this.config.units.ash_yari,r.Vector.add(t,r.Vector.rotate([-30,0],e)),n),this.makeEnemyUnit(this.config.units.ash_yari,r.Vector.add(t,r.Vector.rotate([30,0],e)),n),this.makeEnemyUnit(this.config.units.ash_yari,r.Vector.add(t,r.Vector.rotate([90,0],e)),n);break;case 1:this.makeEnemyUnit(this.config.units.ash_bow,r.Vector.add(t,r.Vector.rotate([-40,0],e)),n),this.makeEnemyUnit(this.config.units.ash_bow,r.Vector.add(t,r.Vector.rotate([40,0],e)),n);break;case 2:this.makeEnemyUnit(this.config.units.sam_kata,r.Vector.add(t,r.Vector.rotate([-60,0],e)),n),this.makeEnemyUnit(this.config.units.sam_nagi,r.Vector.add(t,r.Vector.rotate([0,0],e)),n),this.makeEnemyUnit(this.config.units.sam_kata,r.Vector.add(t,r.Vector.rotate([60,0],e)),n);break;case 3:this.makeEnemyUnit(this.config.units.cav_bow,r.Vector.add(t,r.Vector.rotate([-60,0],e)),n),this.makeEnemyUnit(this.config.units.cav_bow,r.Vector.add(t,r.Vector.rotate([60,0],e)),n);break;case 4:this.makeEnemyUnit(this.config.units.cav_yari,r.Vector.add(t,r.Vector.rotate([-90,0],e)),n),this.makeEnemyUnit(this.config.units.sam_kata,r.Vector.add(t,r.Vector.rotate([-30,0],e)),n),this.makeEnemyUnit(this.config.units.sam_kata,r.Vector.add(t,r.Vector.rotate([30,0],e)),n),this.makeEnemyUnit(this.config.units.cav_yari,r.Vector.add(t,r.Vector.rotate([90,0],e)),n);break;case 5:this.makeEnemyUnit(this.config.units.ash_arq,r.Vector.add(t,r.Vector.rotate([-60,0],e)),n),this.makeEnemyUnit(this.config.units.ash_arq,r.Vector.add(t,r.Vector.rotate([0,0],e)),n),this.makeEnemyUnit(this.config.units.ash_arq,r.Vector.add(t,r.Vector.rotate([60,0],e)),n)}},t.prototype.makeEnemyUnit=function(t,e,n){this.navigator.battle.federation.objects("Unit").create({commander:this.enemyCommander,alliance:this.enemyAlliance,unitType:t.unitType,marker:t.marker,"stats.placement":{x:e[0],y:e[1],z:n},"stats.canNotRally":!0})},t}(),a=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function u(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((r=r.apply(t,e||[])).next())}))},c=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};if(!r.RuntimeConfiguration.tryAutoRedirect()){var h=new r.Runtime;h.startup(r.RuntimeConfiguration.autoDetect());var f=new r.Navigator(h),l=new u(f);f.lobby.onEnterLobby.subscribe((function(){return a(void 0,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,f.createMatch(l.getParams())];case 1:return t=e.sent(),l.startup(t),[2]}}))}))})),f.battle.onEnterBattle.subscribe((function(){})),f.lobby.onLeaveMatch.subscribe((function(){l.shutdown(),f.navigateToModule("https://warstage.net/#@1").then((function(){}),(function(t){console.error(t)}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,